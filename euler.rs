// Problem #1
// Answer: 233168
//
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we
// get 3, 5, 6 and 9. The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.

fn euler1() -> int {
    return range(1, 1000).filter(|x| x % 3 == 0 || x % 5 == 0).fold(0, |a, b| a + b);
}

// Problem #2
// Answer:
//
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

struct Fibs {
    priv a: uint, b: uint
}

impl Fibs {
    fn new() -> Fibs {
        Fibs { a: 0, b: 0 }
    }
}

impl Iterator<uint> for Fibs {
    fn next(&mut self) -> Option<uint> {
        let c = self.a + self.b;
        self.a = self.b;
        self.b = c;
        return Some(c);
    }
}

fn euler2() -> uint {
    // no takewhile in my version of rust yet so can't test.
    return Fibs{a:0, b:1}.takewhile(|x| x <= 4000000).filter(|x| x % 2 == 0).fold(0, |a, b| a + b);
}

fn main() {
    println(fmt!("1: %d", euler1()));
    println(fmt!("2: %u", euler2()));
}
