#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Project Euler in Python (2.5)
# John Evans <john@jpevans.com>
# Dustin Mitchell <dustin@v.igoro.us>


import sys
import math
import bisect
import time
import itertools
from util import *

##
# decorators for euler methods

solutions = {}
def problem(num):
    def dec(fn):
        solutions[num] = fn
        fn.func_name = 'euler%d' % num
        return fn
    return dec

def answer(ans):
    def dec(fn):
        fn.answer = ans
        def wrapper():
            result = fn()
            assert result == ans, "correct answer: %s; got: %s" % (ans, result)
            return result
        wrapper.answer = fn.answer
        wrapper.func_name = fn.func_name
        wrapper.func_doc = fn.func_doc
        return wrapper
    return dec

##
# solutions

@problem(1)
@answer(233168)
def soln():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    return sum(i for i in xrange(1, 1000) if i % 3 == 0 or i % 5 == 0)

@problem(2)
@answer(4613732)
def soln():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    Find the sum of all the even-valued terms in the sequence which do not
    exceed four million.
    """
    total = 0
    n = 0
    while 1:
        f = fib(n)
        if f > 4000000: break
        if f & 1 == 0: total += f
        n += 1
    return total

@problem(3)
@answer(6857)
def soln():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    """
    X = 600851475143
    mkprimes(math.ceil(math.sqrt(X)))
    for i in xrange(len(primes)):
        if X % primes[-i] == 0:
            return primes[-i]

@problem(4)
@answer(906609)
def soln():
    """ 
    A palindromic number reads the same both ways. The largest
    palindrome made from the product of two 2-digit numbers is 9009 =
    91 99.

    Find the largest palindrome made from the product of two 3-digit
    numbers.
    """
    def product_palindromes():
        for a in range(100, 1000):
            for b in range(a, 1000):
                c = a * b
                if is_palindrome(c):
                    yield c
    return findmin([p for p in product_palindromes() ], cmp=lambda x,y:x<y)

@problem(5)
@answer(232792560)
def soln():
    """ 
    2520 is the smallest number that can be divided by each of the
    numbers from 1 to 10 without any remainder.

    What is the smallest number that is evenly divisible by all of the
    numbers from 1 to 20?
    """
    return reduce(lcm, range(1,21))

@problem(6)
@answer(25164150)
def soln():
    """
    The sum of the squares of the first ten natural numbers is,
      1**2 + 2**2 + ... + 10**2 = 385
    The square of the sum of the first ten natural numbers is,
      (1 + 2 + ... + 10)**2 = 55**2 = 3025
    Hence the difference between the sum of the squares of the first
    ten natural numbers and the square of the sum is 3025 - 385 = 2640.

    Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.
    """
    r = range(1, 101)
    s = sum(r)
    return (s * s) - sum([(i * i) for i in r])


@problem(7)
@answer(104743)
def soln():
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10001st prime number?
    """
    nprimes(10001)
    return primes[10000]

@problem(10)
@answer(142913828922)
def soln():
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
    """
    mkprimes(2000000)
    return sum(p for p in primes if p < 2000000)

@problem(11)
@answer(70600674)
def soln():
    """
    In the 20x20 grid below, four numbers along a diagonal line have been marked in red.

    The product of these numbers is 26 x 63 x 78 x 14 = 1788696.

    What is the greatest product of four adjacent numbers in any direction (up,
    down, left, right, or diagonally) in the 20x20 grid?
    """
    grid = [
            [8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8],
            [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0],
            [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65],
            [52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91],
            [22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
            [24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50],
            [32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
            [67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21],
            [24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
            [21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95],
            [78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92],
            [16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57],
            [86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58],
            [19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40],
            [4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66],
            [88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69],
            [4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36],
            [20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16],
            [20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54],
            [1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48],
        ]
    def get(x, y):
        if x < 0 or x >= 20 or y < 0 or y >= 20: return 0
        return grid[x][y]

    def prod(l): return reduce(lambda x,y : x*y, l)
    biggest = 0
    for x in range(20-4):
        for y in range(20-4):
            vec = [ get(x+i, y+i) for i in range(4) ]
            biggest = max(biggest, prod(vec))
            vec = [ get(x+(4-i), y+i) for i in range(4) ]
            biggest = max(biggest, prod(vec))
            vec = [ get(x+i, y) for i in range(4) ]
            biggest = max(biggest, prod(vec))
            vec = [ get(x, y+i) for i in range(4) ]
            biggest = max(biggest, prod(vec))

    return biggest

@problem(12)
@answer(76576500)
def soln():
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    ...

    What is the value of the first triangle number to have over five hundred divisors?
    """
    def triangles():
        i = 3
        sum = 6
        while 1:
            i += 1
            sum += i
            yield sum
    for t in triangles():
        nf = nfactors(t)
        if nf >= 500:
            return t

@problem(13)
@answer(5537376230)
def soln():
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    """
    # pretty boring in Python
    nums = """
    37107287533902102798797998220837590246510135740250
    46376937677490009712648124896970078050417018260538
    74324986199524741059474233309513058123726617309629
    91942213363574161572522430563301811072406154908250
    23067588207539346171171980310421047513778063246676
    89261670696623633820136378418383684178734361726757
    28112879812849979408065481931592621691275889832738
    44274228917432520321923589422876796487670272189318
    47451445736001306439091167216856844588711603153276
    70386486105843025439939619828917593665686757934951
    62176457141856560629502157223196586755079324193331
    64906352462741904929101432445813822663347944758178
    92575867718337217661963751590579239728245598838407
    58203565325359399008402633568948830189458628227828
    80181199384826282014278194139940567587151170094390
    35398664372827112653829987240784473053190104293586
    86515506006295864861532075273371959191420517255829
    71693888707715466499115593487603532921714970056938
    54370070576826684624621495650076471787294438377604
    53282654108756828443191190634694037855217779295145
    36123272525000296071075082563815656710885258350721
    45876576172410976447339110607218265236877223636045
    17423706905851860660448207621209813287860733969412
    81142660418086830619328460811191061556940512689692
    51934325451728388641918047049293215058642563049483
    62467221648435076201727918039944693004732956340691
    15732444386908125794514089057706229429197107928209
    55037687525678773091862540744969844508330393682126
    18336384825330154686196124348767681297534375946515
    80386287592878490201521685554828717201219257766954
    78182833757993103614740356856449095527097864797581
    16726320100436897842553539920931837441497806860984
    48403098129077791799088218795327364475675590848030
    87086987551392711854517078544161852424320693150332
    59959406895756536782107074926966537676326235447210
    69793950679652694742597709739166693763042633987085
    41052684708299085211399427365734116182760315001271
    65378607361501080857009149939512557028198746004375
    35829035317434717326932123578154982629742552737307
    94953759765105305946966067683156574377167401875275
    88902802571733229619176668713819931811048770190271
    25267680276078003013678680992525463401061632866526
    36270218540497705585629946580636237993140746255962
    24074486908231174977792365466257246923322810917141
    91430288197103288597806669760892938638285025333403
    34413065578016127815921815005561868836468420090470
    23053081172816430487623791969842487255036638784583
    11487696932154902810424020138335124462181441773470
    63783299490636259666498587618221225225512486764533
    67720186971698544312419572409913959008952310058822
    95548255300263520781532296796249481641953868218774
    76085327132285723110424803456124867697064507995236
    37774242535411291684276865538926205024910326572967
    23701913275725675285653248258265463092207058596522
    29798860272258331913126375147341994889534765745501
    18495701454879288984856827726077713721403798879715
    38298203783031473527721580348144513491373226651381
    34829543829199918180278916522431027392251122869539
    40957953066405232632538044100059654939159879593635
    29746152185502371307642255121183693803580388584903
    41698116222072977186158236678424689157993532961922
    62467957194401269043877107275048102390895523597457
    23189706772547915061505504953922979530901129967519
    86188088225875314529584099251203829009407770775672
    11306739708304724483816533873502340845647058077308
    82959174767140363198008187129011875491310547126581
    97623331044818386269515456334926366572897563400500
    42846280183517070527831839425882145521227251250327
    55121603546981200581762165212827652751691296897789
    32238195734329339946437501907836945765883352399886
    75506164965184775180738168837861091527357929701337
    62177842752192623401942399639168044983993173312731
    32924185707147349566916674687634660915035914677504
    99518671430235219628894890102423325116913619626622
    73267460800591547471830798392868535206946944540724
    76841822524674417161514036427982273348055556214818
    97142617910342598647204516893989422179826088076852
    87783646182799346313767754307809363333018982642090
    10848802521674670883215120185883543223812876952786
    71329612474782464538636993009049310363619763878039
    62184073572399794223406235393808339651327408011116
    66627891981488087797941876876144230030984490851411
    60661826293682836764744779239180335110989069790714
    85786944089552990653640447425576083659976645795096
    66024396409905389607120198219976047599490197230297
    64913982680032973156037120041377903785566085089252
    16730939319872750275468906903707539413042652315011
    94809377245048795150954100921645863754710598436791
    78639167021187492431995700641917969777599028300699
    15368713711936614952811305876380278410754449733078
    40789923115535562561142322423255033685442488917353
    44889911501440648020369068063960672322193204149535
    41503128880339536053299340368006977710650566631954
    81234880673210146739058568557934581403627822703280
    82616570773948327592232845941706525094512325230608
    22918802058777319719839450180888072429661980811197
    77158542502016545090413245809786882778948721859617
    72107838435069186155435662884062257473692284509516
    20849603980134001723930671666823555245252804609722
    53503534226472524250874054075591789781264330331690
    """
    nums = map(int, nums.strip().split('\n'))
    s = str(sum(nums))
    return int(s[:10])


@problem(14)
@answer(837799)
def soln():
    """
    The following iterative sequence is defined for the set of positive integers:

    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)

    Using the rule above and starting with 13, we generate the following sequence:

    13  40  20  10  5  16  8  4  2  1

    It can be seen that this sequence (starting at 13 and finishing at 1)
    contains 10 terms. Although it has not been proved yet (Collatz Problem),
    it is thought that all starting numbers finish at 1.

    Which starting number, under one million, produces the longest chain?

    NOTE: Once the chain starts the terms are allowed to go above one million.
    """
    lens = { 1 : 1 }
    def getlen(i):
        if i in lens: return lens[i]
        if i & 1:
            l = getlen(3*i+1)+1
        else:
            l = getlen(i/2)+1
        lens[i] = l
        return l

    maxlen = 0
    biggest_start = 0
    for i in xrange(1,1000000):
        newlen = getlen(i)
        if newlen > maxlen:
            biggest_start = i
            maxlen = newlen

    return biggest_start

@problem(15)
@answer(137846528820)
def soln():
    """
    Starting in the top left corner of a 22 grid, there are 6 routes (without
    backtracking) to the bottom right corner.

    How many routes are there through a 2020 grid?
    """
    # divide the square along the LL-UR diagonal.  For each vertex on the diagonal,
    # the number of paths from the upper-left corner is given by (n choose k),
    # where n is the side-length of the square, and k is the index of the vertex
    # along the diagonal.  The number of paths through that vertex to the
    # lower-right corner is then, by symmetry, (n choose k)^2.  We simply sum this
    # value for each k.
    n = 20
    return sum([ choose(n,k) ** 2 for k in range(0, n+1) ])

@problem(17)
@answer(21124)
def soln():
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four,
    five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

    If all the numbers from 1 to 1000 (one thousand) inclusive were written out
    in words, how many letters would be used?
    """
    digits = {
        0 : '',
        1 : 'one',
        2 : 'two',
        3 : 'three',
        4 : 'four',
        5 : 'five',
        6 : 'six',
        7 : 'seven',
        8 : 'eight',
        9 : 'nine',
    }

    special = {
        10 : 'ten',
        11 : 'eleven',
        12 : 'twelve',
        13 : 'thirteen',
        14 : 'fourteen',
        15 : 'fifteen',
        16 : 'sixteen',
        17 : 'seventeen',
        18 : 'eighteen',
        19 : 'nineteen',
        100 : 'onehundred',
        1000 : 'onethousand',
    }

    tens = {
        2 : 'twenty',
        3 : 'thirty',
        4 : 'forty',
        5 : 'fifty',
        6 : 'sixty',
        7 : 'seventy',
        8 : 'eighty',
        9 : 'ninety',
    }

    hundred = 'hundred'
    hundred_and = 'hundredand'
    one_thousand = 'onethousand'

    def word(n):
        if n in special: return special[n]
        if n in digits: return digits[n]
        if n >= 100:
            if n >= 200 and n % 100 == 0:
                return digits[n/100] + hundred
            return digits[n/100] + hundred_and + word(n % 100)
        return tens[n/10] + digits[n % 10]

    return sum([ len(word(n)) for n in range(1, 1001) ])

@problem(18)
@answer(1074)
def soln():
    """
    By starting at the top of the triangle below and moving to adjacent numbers
    on the row below, the maximum total from top to bottom is 23.

    3
    7 5
    2 4 6
    8 5 9 3

    That is, 3 + 7 + 4 + 9 = 23.

    Find the maximum total from top to bottom of the triangle below:

    75
    95 64
    17 47 82
    18 35 87 10
    20 04 82 47 65
    19 01 23 75 03 34
    88 02 77 73 07 63 67
    99 65 04 28 06 16 70 92
    41 41 26 56 83 40 80 70 33
    41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
    70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
    63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
    """

    triangle_rows = [
        [75],
        [95,64],
        [17,47,82],
        [18,35,87,10],
        [20,4,82,47,65],
        [19,1,23,75,3,34],
        [88,2,77,73,7,63,67],
        [99,65,4,28,6,16,70,92],
        [41,41,26,56,83,40,80,70,33],
        [41,48,72,33,47,32,37,16,94,29],
        [53,71,44,65,25,43,91,52,97,51,14],
        [70,11,33,28,77,73,17,78,39,68,17,57],
        [91,71,52,38,17,14,91,43,58,50,27,29,48],
        [63,66,4,68,89,53,67,30,73,16,69,87,40,31],
        [4,62,98,27,23,9,70,98,73,93,38,53,60,4,23],
        ]

    # convert the triangle into an efficient rooted, directed graph, such that
    # any path from the root terminates at the bottom of the triangle, and all
    # paths through the triangle are represented in the graph.
    def mkgraphs(rows):
        if len(rows) == 1:
            return [ (e, None, None) for e in rows[0] ]
        subgraphs = mkgraphs(rows[1:])
        row = rows[0]
        return [ (row[i], subgraphs[i], subgraphs[i+1]) for i in range(len(row)) ]
    triangle = mkgraphs(triangle_rows)[0]

    # now just do a recursive search
    def greatestpath(graphroot):
        e, leftsub, rightsub = graphroot
        if leftsub is None or rightsub is None:
            return [e]
        leftpath = greatestpath(leftsub)
        rightpath = greatestpath(rightsub)
        if sum(leftpath) > sum(rightpath):
            return [ e ] + leftpath
        else:
            return [ e ] + rightpath

    gp = greatestpath(triangle)
    return sum(gp)

@problem(19)
@answer(171)
def soln():
    """
    You are given the following information, but you may prefer to do some
    research for yourself.

        * 1 Jan 1900 was a Monday.
        * Thirty days has September,
          April, June and November.
          All the rest have thirty-one,
          Saving February alone,
          Which has twenty-eight, rain or shine.
          And on leap years, twenty-nine.

        * A leap year occurs on any year evenly divisible by 4, but not on a
          century unless it is divisible by 400.

    How many Sundays fell on the first of the month during the twentieth
    century (1 Jan 1901 to 31 Dec 2000)?
    """
    import datetime

    suns = 0
    for year in range(1901, 2001):
        for month in range(1, 13):
            d = datetime.date(year, month, 1)
            if d.weekday() == 6: suns += 1

    return suns

@problem(501)
def soln():
    """
    The eight divisors of 24 are 1, 2, 3, 4, 6, 8, 12 and 24. The ten numbers not
    exceeding 100 having exactly eight divisors are 24, 30, 40, 42, 54, 56, 66, 70,
    78 and 88. Let f(n) be the count of numbers not exceeding n with exactly eight
    divisors.

    You are given f(100) = 10, f(1000) = 180 and f(10^6) = 224427.

    Find f(10^12).
    """
    # prime factors:
    # 
    # 24: 2^3 * 3^1
    #
    #     2 2 2 3
    #  1:
    #  2: *
    #  4: * *
    #  8: * * *
    #  3:       *
    #  6: *     *
    #  12:* *   *
    #  24:* * * *
    #
    # 30: 2 * 3 * 5
    # 40: 2*3 * 5
    # 42: 2 * 3 * 7
    # 54: 2 * 3^3
    # 88: 2*3 * 11^1
    #
    # so, all numbers with prime factors such that there are 8 distinct combinations:
    #
    # * p1 * p2 * p3
    # * p1^3 * p2
    # * p1^7
    #
    # So given n, f(n) is the sum of
    #
    # A. count of triples of primes with p1 < p2 < p3 < (n/4), s.t. p1*p2*p3 <= n
    # B. count of pairs of primes with p1 < (n/2)^(1/3), p2 <= n/8, s.t. p1^3*p2 <= n
    # C. count of primes <= n^(1/7) 
    #
    # The tricky bit is to calculate A quickly

    def calcA(n):
        print "calcA", n
        start = time.time()
        pmax = n / 4
        i = 0
        nd6 = n/6
        nd2 = n/2
        for p3 in primegen():
            if p3 > nd6:
                break
            for p2 in primegen():
                if p2 >= p3:
                    break
                p2p3 = p2*p3
                if p2p3 > nd2:
                    break
                ndp2p3 = n / p2p3
                for p1 in primegen():
                    if p1 >= p2:
                        break
                    if p1 * p2p3 <= n:
                        i += 1
                        #print "%d * %d * %d = %d" % (p1, p2, p3, p1 * p2 * p3)
                    else:
                        break
        print time.time() - start
        return i

    def calcB(n):
        print "calcB", n
        p1max = pow(n/2, 1/3.0)
        p1s = list(itertools.takewhile(lambda p: p <= p1max, primegen()))
        p2max = n/8
        p2s = list(itertools.takewhile(lambda p: p <= p2max, primegen()))

        i = 0
        for p1 in p1s:
            for p2 in p2s:
                if p1 == p2:
                    continue
                if p1 ** 3 * p2 <= n:
                    #print "%d^3 * %d = %d" % (p1, p2, p1 ** 3 * p2)
                    i += 1
        return i

    def calcC(n):
        print "calcC", n
        septroot = pow(n, 1/7.0)
        i = 0
        for p in primegen():
            if p > septroot:
                break
            #print "%d^7 = %d" % (p, p ** 7)
            i += 1
        return i

    def f(n):
        return calcA(n) + calcB(n) + calcC(n)

    assert f(100) == 10
    assert f(1000) == 180
    assert f(10**6) == 224427
    return f(10**12)

@problem(502)
def soln():
    """
    We define a block to be a rectangle with a height of 1 and an integer-valued length. Let a castle be a configuration of stacked blocks.

    Given a game grid that is w units wide and h units tall, a castle is generated according to the following rules:

	Blocks can be placed on top of other blocks as long as nothing sticks out past the edges or hangs out over open space.
	All blocks are aligned/snapped to the grid.
	Any two neighboring blocks on the same row have at least one unit of space between them.
	The bottom row is occupied by a block of length w.
	The maximum achieved height of the entire castle is exactly h.
	The castle is made from an even number of blocks.

    The following is a sample castle for w=8 and h=5:

      X   X 
      X   XX
     XX X XX
    XXXXX XX
    XXXXXXXX

    Let F(w,h) represent the number of valid castles, given grid parameters w and h.

    For example, F(4,2) = 10, F(13,10) = 3729050610636, F(10,13) = 37959702514, and F(100,100) mod 1 000 000 007 = 841913936.

    Find (F(1012,100) + F(10000,10000) + F(100,1012)) mod 1 000 000 007.
    """

    # solution:
    #
    # lists of rows of blocks, each represented as list of [startcol, endcol)
    # tuples

    def show_row(row):
        rv = []
        x = 0
        for l, r in row:
            rv.append(' ' * (l - x))
            rv.append('#' * (r - l))
            x = r
        return ''.join(rv)

    def show_solution(soln):
        n = sum(len(row) for row in soln)
        return '\n'.join(show_row(row) for row in soln) + (
                "-- %d blocks (%s)" % (n, 'odd' if (n & 1) else 'even'))

    def powerset(n):
        if n == 0:
            return
        yield [n]
        for i in xrange(1, n):
            for subseq in powerset(i):
                yield [n-i] + subseq

    def subdivide(w):
        "return a list of all possible combinations of blocks of width w"
        for pset in powerset(w):
            rows = [[], []] # one starts with a block, the other does not
            x = 0
            i = 0
            for p in pset:
                interval = x, x + p
                x += p
                rows[i&1].append(interval)
                i += 1
            for row in rows:
                yield row

    def all_solutions(w, h):
        if h == 1:
            for row in subdivide(w):
                yield [row]
        else: 
            for soln in all_solutions(w, h-1):
                for row in subdivide(w):
                    yield [row] + soln

    def rule1(soln):
        occupied = set()
        for row in soln:
            row_occ = set()
            for l, r in row:
                for x in range(l, r):
                    row_occ.add(x)
            if occupied - row_occ:
                return False
            occupied = row_occ
        return True

    # rule 2 is trivial
    # rule 3 is a consequence of subdivide

    def rule4(soln, w):
        return soln[-1] == [(0, w)]

    def rule5(soln):
        return soln[0] != []

    def rule6(soln):
        n = sum(len(row) for row in soln)
        return not (n & 1)

    def count_solutions(w, h):
        count = 0
        for soln in all_solutions(w, h):
            if rule4(soln, w) and rule5(soln) and rule1(soln):
                count += 1
        return count

    for h in range(1, 6):
        for w in range(1, 6):
            print "%4d" % count_solutions(w, h),
        print

    # NOTES: for the combined (even and odd) measurement, there is some
    # regularity, breaking down a solution into a collection of combinations of
    # shorter, thinner solutions.  However, the available ways of breaking
    # these solutions down seem to admit duplicates.


@answer(37125450.44)
@problem(523)
def soln():
    """
    Consider the following algorithm for sorting a list:

	1. Starting from the beginning of the list, check each pair of adjacent elements in turn.
	2. If the elements are out of order:
	    a. Move the smallest element of the pair at the beginning of the list.
	    b. Restart the process from step 1.
	3. If all pairs are in order, stop.

    For example, the list { 4 1 3 2 } is sorted as follows:

	4_1 3 2 (4 and 1 are out of order so move 1 to the front of the list)
	1 4_3 2 (4 and 3 are out of order so move 3 to the front of the list)
	3_1 4 2 (3 and 1 are out of order so move 1 to the front of the list)
	1 3 4_2 (4 and 2 are out of order so move 2 to the front of the list)
	2_1 3 4 (2 and 1 are out of order so move 1 to the front of the list)
	1 2 3 4 (The list is now sorted)

    Let F(L) be the number of times step 2a is executed to sort list L. For example, F({ 4 1 3 2 }) = 5.

    Let E(n) be the expected value of F(P) over all permutations P of the integers {1, 2, ..., n}.
    You are given E(4) = 3.25 and E(10) = 115.725.

    Find E(30). Give your answer rounded to two digits after the decimal point.
    """
    # let g(n) = total number of operations to sort all permutations of n items
    # 
    # assume we have g(n-1); for each permutation of n items, we will begin by sorting
    # 
    #     a1 .. a(n-1)
    # 
    # before even looking at an; after this, a1 .. a(n-1) will be in sorted order.
    # and depending on which item an is, we will do additional moves to insert into that
    # sorted order.
    # 
    #   0         moves: a1 .. a(n-1) an
    #   1         move:  an a1 .. a(n-1)
    #   2         moves: a1 an a2 .. a(n-1)
    #   4         moves: a1 a2 an a3 .. a(n-1)
    #   2**(n-2)  moves: a1 a2 .. a(n-2) an a(n-1)
    # 
    # so each ordering of the (n-1) items occurs n times, adding between 0 and n-1
    # additional moves.
    # 
    # g(2) = 1
    # g(n) = n* g(n-1) + (n-1)! * sum(i=0..n-2 | 2**i)
    #      = n* g(n-1) + (n-1)! * (2**(n-1)-1)
    # 
    # then E(n) is g(n) / n!

    def fact(n):
        if n == 1:
            return 1
        else:
            return n * fact(n-1)
    assert fact(4) == 24

    def g(n):
        if n == 2:
            return 1
        return n * g(n-1) + fact(n-1) * (2 ** (n-1) - 1)
    assert g(2) == 1
    assert g(3) == 9
    assert g(4) == 78

    def E(n):
        return float(g(n)) / fact(n)

    assert str(round(E(4), 2)) == "3.25"
    assert str(round(E(10), 3)) == "115.725"

    return round(E(30), 2)


@problem(535)
def soln():
    """
    Consider the infinite integer sequence S starting with:
    S = 1, 1, 2, 1, 3, 2, 4, 1, 5, 3, 6, 2, 7, 8, 4, 9, 1, 10, 11, 5, ...

    Circle the first occurrence of each integer.
    S = ①, 1, ②, 1, ③, 2, ④, 1, ⑤, 3, ⑥, 2, ⑦, ⑧, 4, ⑨, 1, ⑩, ⑪, 5, ...

    The sequence is characterized by the following properties:

    * The circled numbers are consecutive integers starting with 1.
    * Immediately preceding each non-circled numbers ai, there are exactly
      ⌊√ai⌋ adjacent circled numbers, where ⌊⌋ is the floor function.
    * If we remove all circled numbers, the remaining numbers form a sequence identical to S, so S is a fractal sequence.

    Let T(n) be the sum of the first n elements of the sequence.
    You are given T(1) = 1, T(20) = 86, T(103) = 364089 and T(109) = 498676527978348241.

    Find T(1018). Give the last 9 digits of your answer.
    """
    def squares():
        s = 0
        odd = 1
        until = 2*(10**9)
        while s < until:
            yield s
            s += odd
            odd += 2
    squares = list(squares())

    sqrts = {}
    def sqrt(x):
        try:
            return sqrts[x]
        except KeyError:
            for i, sq in enumerate(squares):
                if sq == x:
                    sqrts[x] = i
                    break
                elif sq > x:
                    sqrts[x] = i-1
                    break
            return sqrts[x]

    def _S():
        circled = itertools.count(1)
        yield circled.next()
        noncircled = _S()
        for i in noncircled:
            for _ in xrange(sqrt(i)):
                yield circled.next()
            yield i

    S = itertools.chain([1], _S())

    # TODO: this isn't fast enough..
    sum = 0
    stop = 10**18
    for i, x in enumerate(S, 1):
        sum += x
        if i == stop:
            return int(str(sum)[-9:])

##
# runner

def main():
    if len(sys.argv) > 1:
        for n in sys.argv[1:]:
            n = int(n)
            if n in solutions:
                soln = solutions[n]()
                if soln is None:
                    print("No solution")
                else:
                    print "%d: %s" % (n, soln)
            else:
                print "%d: no solution" % (n,)
    else:
        for n, soln in sorted(solutions.items()):
            print "%d: %d" % (n, soln())

if __name__ == "__main__":
    main()
